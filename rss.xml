<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>BlockByte</title><link>http://kirbyfan64.github.io/</link><description>Random programming tidbits/tutorials</description><language>en</language><lastBuildDate>Sat, 28 Nov 2015 18:33:23 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Implementing a (sort of) generic, (sort of) type-safe array in C</title><link>http://kirbyfan64.github.io/posts/implementing-a-sort-of-generic-sort-of-type-safe-arrayin-c.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;I've been using C for a project I've been working on, and one thing I find
annoying are manually-managed arrays. Ever since watching &lt;a class="reference external" href="https://www.youtube.com/watch?v=YQs6IC-vgmo"&gt;Bjarne Stroustrup's
talk on linked lists&lt;/a&gt;, I try to
avoid them as much as possible. Therefore, I prefer using a container roughly
equivalent to C++'s vector.&lt;/p&gt;
&lt;p&gt;The obvious thing to do here would be to use something like &lt;a class="reference external" href="https://www.youtube.com/watch?v=YQs6IC-vgmo"&gt;glib's GArray type&lt;/a&gt; or &lt;a class="reference external" href="http://wolkykim.github.io/qlibc/doc/html/qvector_8c.html"&gt;qlibc's qvector type&lt;/a&gt;. However, both APIs
require using &lt;tt class="docutils literal"&gt;sizeof&lt;/tt&gt; and are completely not-type-safe; it's easy to add a char
to an arrayh/vector of ints. This made me wonder: is it possible to implement a
type-safe, generic array type in C?&lt;/p&gt;
&lt;p&gt;Now, I mean the C version of type-safe, which basically means that your compiler
has to show either a warning or an error (probably if compiling with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-Werror&lt;/span&gt;&lt;/tt&gt;)
when you try to append the wrong type to an array.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/implementing-a-sort-of-generic-sort-of-type-safe-arrayin-c.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/implementing-a-sort-of-generic-sort-of-type-safe-arrayin-c.html</guid><pubDate>Sat, 28 Nov 2015 22:48:13 GMT</pubDate></item><item><title>Programming Decisions</title><link>http://kirbyfan64.github.io/posts/programming-decisions.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt; &lt;em&gt;This is a satirical post. If your name is mentioned in a diminishing way, don't be insulted; I insult myself a few times throughout the post. Also, I like some of the projects I made fun of, including C++, JavaScript, Kotlin, Nim, Fbuild, and plenty of others. Again, this is satirical.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A farmer couldn't figure out how to maintain his web servers, so he gave it to his animals. However, they simply couldn't agree on what tools to use.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/programming-decisions.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/programming-decisions.html</guid><pubDate>Fri, 19 Jun 2015 22:54:34 GMT</pubDate></item><item><title>The Magic of RPython</title><link>http://kirbyfan64.github.io/posts/the-magic-of-rpython.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://rpython.readthedocs.org/en/latest/"&gt;RPython&lt;/a&gt; is a really nice translation framework that converts a (very) restricted subset of Python 2 to C code. Better yet, RPython will generate JITs for your interpreters. Although there are very good articles on how to write interpreters with RPython, I don't often find anything that describes the language itself. My goal with this post is to do just that: describe RPython itself. I'm going to leave out the things about the JITs; the RPython FAQ links to a good tutorial about that.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-magic-of-rpython.html"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/the-magic-of-rpython.html</guid><pubDate>Sat, 30 May 2015 00:19:38 GMT</pubDate></item><item><title>Functional programming isn't the answer to all problems (and neither is OOP)</title><link>http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;I like functional programming. Being a big fan of Python and C++, it took a while to get used to functional languages like Haskell and Felix (my personal favorite FP language). I started out with &lt;em&gt;Learn You a Haskell for Great Good!&lt;/em&gt; and then started toying with OCaml and Felix. I stuck with Felix and ditched OCaml because I just didn't like it.&lt;/p&gt;
&lt;p&gt;However, it isn't the solution to the world's issues. People used to think OOP was the solution to everything. They started shoving every freaking thing on earth in a class and adding useless methods. Then they realized that Java sucked. Now, everyone seems to think that FP is going to take over the world. I disagree. Why?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html</guid><pubDate>Sun, 17 May 2015 21:59:00 GMT</pubDate></item><item><title>The top 5 programming languages you've never heard of (part 2)</title><link>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Yesterday, I wrote a post about &lt;a class="reference external" href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html"&gt;the top 5 programming languages you've never heard of&lt;/a&gt;. Well, since it was kind of short (I didn't have too much time to write), I'm going to put a little more info here.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;</description><category>compilers</category><category>felix</category><category>k</category><category>languages</category><category>myrddin</category><category>nim</category><category>objeck</category><category>programming</category><guid>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html</guid><pubDate>Sun, 08 Mar 2015 22:04:17 GMT</pubDate></item><item><title>The top 5 programming Languages you've never heard of</title><link>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Lately, there's been a large surge in new programming languages as projects such as &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; have been taking the spotlight and showing lots of promise. However, there are some programming languages few have heard of that deserve to be more popular. Here's a brief listing of some of my favorite languages that aren't common sights.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>compilers</category><category>felix</category><category>k</category><category>languages</category><category>myrddin</category><category>nim</category><category>objeck</category><category>programming</category><guid>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html</guid><pubDate>Sun, 08 Mar 2015 00:56:29 GMT</pubDate></item><item><title>Using AppVeyor to distribute Python wheels</title><link>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://wheel.readthedocs.org/en/latest/"&gt;Wheels&lt;/a&gt; are the future of distribution. No more messy broken &lt;cite&gt;setup.py&lt;/cite&gt; scripts or need for a compiler to build C extensions! Of course, this has a glaring issue: a Linux user can't build Wheels of their C extension for Windows. Unless, of course, you use &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;, install the MinGW compilers, define the compiler variables, etc. However, there is an easier way: &lt;a class="reference external" href="http://kirbyfan64.github.io/posts/www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>appveyor</category><category>ci</category><category>python</category><category>wheels</category><guid>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</guid><pubDate>Sun, 21 Sep 2014 22:02:14 GMT</pubDate></item><item><title>Overloading functions with the C preprocessor</title><link>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Let's have an imaginary scenario: you're trying to make a library that has a special function, &lt;em&gt;myfunc&lt;/em&gt;. Now, this functions needs to have two possible ways to invoke it. One way takes one int parameter, the other takes two. Here's how you might do that in C++:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C doesn't have a way to do this. You'll often see code like this:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, this &lt;em&gt;can&lt;/em&gt; be implemented, albeit in a slightly convoluted way using a very controversial tool: the C preprocessor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>c preprocessor hack</category><guid>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</guid><pubDate>Tue, 16 Sep 2014 01:42:34 GMT</pubDate></item><item><title>Welcome!</title><link>http://kirbyfan64.github.io/posts/welcome.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;First post!&lt;/p&gt;
&lt;p&gt;This website is my first ever web page. It's written using the excellent &lt;a class="reference external" href="http://getnikola.com"&gt;Nikola&lt;/a&gt; and reStructuredText. The majority of its content is going to revolve around programming: tutorials, experiments, and lots and lots of rants. :)&lt;/p&gt;
&lt;p&gt;Have fun browsing!&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/welcome.html</guid><pubDate>Wed, 10 Sep 2014 23:02:45 GMT</pubDate></item></channel></rss>