<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>BlockByte</title><link>http://kirbyfan64.github.io/</link><description>Random programming tidbits/tutorials</description><language>en</language><lastBuildDate>Fri, 19 Jun 2015 18:04:51 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Programming Decisions</title><link>http://kirbyfan64.github.io/posts/programming-decisions.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt; &lt;em&gt;This is a satirical post. If your name is mentioned in a diminishing way, don't be insulted; I insult myself a few times throughout the post. Also, I like some of the projects I made fun of, including C++, JavaScript, Kotlin, Nim, Fbuild, and plenty of others. Again, this is satirical.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A farmer couldn't figure out how to maintain his web servers, so he gave it to his animals. However, they simply couldn't agree on what tools to use.&lt;/p&gt;
&lt;p&gt;Horse: We should write it in PHP.&lt;/p&gt;
&lt;p&gt;Cow: No; Ruby on Rails is better.&lt;/p&gt;
&lt;p&gt;Duck: Forget about Rails; we need a native HTML+JS (or TypeScript) solution using React.js components.&lt;/p&gt;
&lt;p&gt;Bee (various non-farm animals joined in the conversation): But Polymer is so much better!&lt;/p&gt;
&lt;p&gt;Duck: And slower.&lt;/p&gt;
&lt;p&gt;Bee: That was before 1.0.&lt;/p&gt;
&lt;p&gt;Cow: But JavaScript is unmaintainable!&lt;/p&gt;
&lt;p&gt;Leech: Use TypeScript.&lt;/p&gt;
&lt;p&gt;Horse: Microsoft is evil.&lt;/p&gt;
&lt;p&gt;Cow: With TypeScript, we need to compile our code. What about PyPy.js?&lt;/p&gt;
&lt;p&gt;Fish: Then we end up with a 2 hour startup time. That thing blows through 10 MB of data!&lt;/p&gt;
&lt;p&gt;Bee: Just use TypeScript with a build system like Grunt.&lt;/p&gt;
&lt;p&gt;Leech: Ugh! Grunt is so last-gen! Use Gulp.&lt;/p&gt;
&lt;p&gt;Ant: Or Google's Anvil.&lt;/p&gt;
&lt;p&gt;Duck: Anvil? Sounds painful.&lt;/p&gt;
&lt;p&gt;Pig: What about writing the site in Nim? It has a JS backend.&lt;/p&gt;
&lt;p&gt;Horse: Python is evil, and therefore Nim is evil.&lt;/p&gt;
&lt;p&gt;Leech: Nim's creator called me a Leech!&lt;/p&gt;
&lt;p&gt;Pig: &lt;em&gt;YOU ARE A LEECH!!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bee: We can use Java+GWT.&lt;/p&gt;
&lt;p&gt;Duck: Or just Java.&lt;/p&gt;
&lt;p&gt;Ant: Eh, no one likes Java; how about Scala?&lt;/p&gt;
&lt;p&gt;Horse: Scala takes forever to compile, is slow, and is therefore evil.&lt;/p&gt;
&lt;p&gt;Pig: We can use Kotlin or Groovy or...&lt;/p&gt;
&lt;p&gt;Cow: But now we're back to the TypeScript problem: we need to compile our code.&lt;/p&gt;
&lt;p&gt;Fish: Use Maven.&lt;/p&gt;
&lt;p&gt;Ant: HA! We're not suicidal! Gradle is so much better.&lt;/p&gt;
&lt;p&gt;Deer: And Buck.&lt;/p&gt;
&lt;p&gt;Horse: Buck has Android build rules and is therefore evil.&lt;/p&gt;
&lt;p&gt;Bee: All those suck! Just use Fbuild.&lt;/p&gt;
&lt;p&gt;Duck: The Scala builder in Fbuild has been broken for ages, and no one there is seemingly smart enough to fix it.&lt;/p&gt;
&lt;p&gt;Leech: At HLUYTSWE (Magic Engineering Company Inc.), they use a bunch of shell scripts layered under Shake using kdb to store hashes and redo for...&lt;/p&gt;
&lt;p&gt;Horse: Shell scripts are evil.&lt;/p&gt;
&lt;p&gt;Fish: *sigh* Whatever. How about C++?&lt;/p&gt;
&lt;p&gt;Ant: Still not suicidal.&lt;/p&gt;
&lt;p&gt;Cow: If we use C++, we need another build system. Again.&lt;/p&gt;
&lt;p&gt;Fish: Fbuild.&lt;/p&gt;
&lt;p&gt;Horse: Make.&lt;/p&gt;
&lt;p&gt;Ant: CMake+Ninja.&lt;/p&gt;
&lt;p&gt;Fish: Bazel.&lt;/p&gt;
&lt;p&gt;Leech: Autotools.&lt;/p&gt;
&lt;p&gt;Cow: Autotools == pain, horror, and lengthy config times. CMake is faster.&lt;/p&gt;
&lt;p&gt;Horse: CMake uses macros and is therefore evil.&lt;/p&gt;
&lt;p&gt;Cow: But CMake has a Ninja generator!&lt;/p&gt;
&lt;p&gt;Fish: Then use GN. Or Gyp.&lt;/p&gt;
&lt;p&gt;Duck: Gyp is ugly and complicated.&lt;/p&gt;
&lt;p&gt;Pig: Ninja was written for Chromium. I heard that they track the type of oven you have and zap you if you boil peanuts. We should use C++ with Clang+Tup.&lt;/p&gt;
&lt;p&gt;Horse: Clang is sponsored by Apple and is therefore evil. The creator of Tup has a secret alliance with Mordor; therefore, Tup is evil.&lt;/p&gt;
&lt;p&gt;Ant: GCC is better. Their license is the &lt;em&gt;one&lt;/em&gt; true way. Besides, what writing the site in Crystal or Felix?&lt;/p&gt;
&lt;p&gt;Horse: Richard Stallman's beard is too long; therefore, GCC evil. Crystal is written by a sword-wielding apple and is therefore evil. Felix is written by someone who can't shut their mouth for over 5 minutes and is therefore evil.&lt;/p&gt;
&lt;p&gt;Leech: The MIT Expat license is much better than the GPL. What about Rust?&lt;/p&gt;
&lt;p&gt;Ant: Again, not suicidal. The sheer number of errors related to borrowing/stealing/pillaging gives me heartburn.&lt;/p&gt;
&lt;p&gt;Horse: Rust...&lt;/p&gt;
&lt;p&gt;Everyone: TO YOU EVERYTHING IS EVIL!!!!!!!!!!!!!!!&lt;/p&gt;
&lt;p&gt;Bee: C++ still has better IDE support than the other languages; we can use Visual Studio.&lt;/p&gt;
&lt;p&gt;Horse: Visual Studio... &lt;em&gt;gets kicked by pig&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duck: Nah, Vim is the best editor.&lt;/p&gt;
&lt;p&gt;Pig: Emacs is better. I can type &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-f&lt;/span&gt; &lt;span class="pre"&gt;M-d&lt;/span&gt; shoot &lt;span class="pre"&gt;C-s-h-l-f-e&lt;/span&gt;&lt;/tt&gt; and get a free hamburger.&lt;/p&gt;
&lt;p&gt;Duck: Vim too: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ahsJGT12$@/ghns&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Leech: Forget about it. I know the best language to use: K. Someone actually wrote a BF interpreter in a few lines of code!&lt;/p&gt;
&lt;p&gt;Pig: The creator of K has no concept of code maintainability, and the person who wrote that interpreter is an alien from Pluto.&lt;/p&gt;
&lt;p&gt;Fish: We can use Elm, which compiles to JS. Or we can use Haskell. I momentarily forgot how superior purely functional programming is...&lt;/p&gt;
&lt;p&gt;Horse: &lt;em&gt;opens his mouth and gets kicked by Duck&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Cow: The entire database can be a monadic applicative functorical set-based polymorphic monomorphic mathical editorial purely functional SHA1-based data structure.&lt;/p&gt;
&lt;p&gt;Leech: What about Python?&lt;/p&gt;
&lt;p&gt;Bee: Booooo to indentation syntax.&lt;/p&gt;
&lt;p&gt;Fish: How about Go?&lt;/p&gt;
&lt;p&gt;Ant: I told you guys! Not suicidal!&lt;/p&gt;
&lt;p&gt;Leech: Someone released a study proving that using Go makes you grow excess armpit hair.&lt;/p&gt;
&lt;p&gt;Pig: Go tracks you steps and zaps you if you kick a gofer.&lt;/p&gt;
&lt;p&gt;Horse: WE WILL GO TO THE FARMER AND ASK!&lt;/p&gt;
&lt;p&gt;Ant, Bee, Leech: We'll go first!&lt;/p&gt;
&lt;p&gt;The ant, bee, and leech went the farmer, who freaked out by the sudden showing of unwanted creatures and drowned them all in alcohol.&lt;/p&gt;
&lt;p&gt;Fish: Why don't you think they've come back?&lt;/p&gt;
&lt;p&gt;Horse: They are evil. We shall go next.&lt;/p&gt;
&lt;p&gt;The horse, cow, duck, fish, pig, went to the farmer. Now, the farmer had been on a vegetarian diet. When he saw all these animals, he want haywire, shot them, and had horse-beef-duck-fish-pork stew for dinner&lt;/p&gt;
&lt;p&gt;However, the farmer realized he still needed to fix his web site, so he paid someone on the side of the street 5 bucks. Now he has a website that handles 0.04 requests per second, and he cannot find anyone who knows how to maintain the INTERCAL+Brainf**k web app the person wrote.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motto&lt;/strong&gt;: There's supposed to be a motto? Uhh...how about "If you don't stop debating, you'll get either drowned in alcohol or eaten?" Yeah, that's a good one! :)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/programming-decisions.html</guid><pubDate>Fri, 19 Jun 2015 22:54:34 GMT</pubDate></item><item><title>The Magic of RPython</title><link>http://kirbyfan64.github.io/posts/the-magic-of-rpython.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://rpython.readthedocs.org/en/latest/"&gt;RPython&lt;/a&gt; is a really nice translation framework that converts a (very) restricted subset of Python 2 to C code. Better yet, RPython will generate JITs for your interpreters. Although there are very good articles on how to write interpreters with RPython, I don't often find anything that describes the language itself. My goal with this post is to do just that: describe RPython itself. I'm going to leave out the things about the JITs; the RPython FAQ links to a good tutorial about that.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-magic-of-rpython.html"&gt;Read moreâ€¦&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/the-magic-of-rpython.html</guid><pubDate>Sat, 30 May 2015 00:19:38 GMT</pubDate></item><item><title>Functional programming isn't the answer to all problems (and neither is OOP)</title><link>http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;I like functional programming. Being a big fan of Python and C++, it took a while to get used to functional languages like Haskell and Felix (my personal favorite FP language). I started out with &lt;em&gt;Learn You a Haskell for Great Good!&lt;/em&gt; and then started toying with OCaml and Felix. I stuck with Felix and ditched OCaml because I just didn't like it.&lt;/p&gt;
&lt;p&gt;However, it isn't the solution to the world's issues. People used to think OOP was the solution to everything. They started shoving every freaking thing on earth in a class and adding useless methods. Then they realized that Java sucked. Now, everyone seems to think that FP is going to take over the world. I disagree. Why?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html"&gt;Read moreâ€¦&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/functional-programming-isnt-the-answer-to-all-problems-and-neither-is-oop.html</guid><pubDate>Sun, 17 May 2015 21:59:00 GMT</pubDate></item><item><title>The top 5 programming languages you've never heard of (part 2)</title><link>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Yesterday, I wrote a post about &lt;a class="reference external" href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html"&gt;the top 5 programming languages you've never heard of&lt;/a&gt;. Well, since it was kind of short (I didn't have too much time to write), I'm going to put a little more info here.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html"&gt;Read moreâ€¦&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;</description><category>compilers</category><category>felix</category><category>k</category><category>languages</category><category>myrddin</category><category>nim</category><category>objeck</category><category>programming</category><guid>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of-part-2.html</guid><pubDate>Sun, 08 Mar 2015 22:04:17 GMT</pubDate></item><item><title>The top 5 programming Languages you've never heard of</title><link>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Lately, there's been a large surge in new programming languages as projects such as &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; have been taking the spotlight and showing lots of promise. However, there are some programming languages few have heard of that deserve to be more popular. Here's a brief listing of some of my favorite languages that aren't common sights.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html"&gt;Read moreâ€¦&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>compilers</category><category>felix</category><category>k</category><category>languages</category><category>myrddin</category><category>nim</category><category>objeck</category><category>programming</category><guid>http://kirbyfan64.github.io/posts/the-top-5-programming-languages-youve-never-heard-of.html</guid><pubDate>Sun, 08 Mar 2015 00:56:29 GMT</pubDate></item><item><title>Using AppVeyor to distribute Python wheels</title><link>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://wheel.readthedocs.org/en/latest/"&gt;Wheels&lt;/a&gt; are the future of distribution. No more messy broken &lt;cite&gt;setup.py&lt;/cite&gt; scripts or need for a compiler to build C extensions! Of course, this has a glaring issue: a Linux user can't build Wheels of their C extension for Windows. Unless, of course, you use &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;, install the MinGW compilers, define the compiler variables, etc. However, there is an easier way: &lt;a class="reference external" href="http://kirbyfan64.github.io/posts/www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html"&gt;Read moreâ€¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>appveyor</category><category>ci</category><category>python</category><category>wheels</category><guid>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</guid><pubDate>Sun, 21 Sep 2014 22:02:14 GMT</pubDate></item><item><title>Overloading functions with the C preprocessor</title><link>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Let's have an imaginary scenario: you're trying to make a library that has a special function, &lt;em&gt;myfunc&lt;/em&gt;. Now, this functions needs to have two possible ways to invoke it. One way takes one int parameter, the other takes two. Here's how you might do that in C++:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C doesn't have a way to do this. You'll often see code like this:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, this &lt;em&gt;can&lt;/em&gt; be implemented, albeit in a slightly convoluted way using a very controversial tool: the C preprocessor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html"&gt;Read moreâ€¦&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>c preprocessor hack</category><guid>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</guid><pubDate>Tue, 16 Sep 2014 01:42:34 GMT</pubDate></item><item><title>Welcome!</title><link>http://kirbyfan64.github.io/posts/welcome.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;First post!&lt;/p&gt;
&lt;p&gt;This website is my first ever web page. It's written using the excellent &lt;a class="reference external" href="http://getnikola.com"&gt;Nikola&lt;/a&gt; and reStructuredText. The majority of its content is going to revolve around programming: tutorials, experiments, and lots and lots of rants. :)&lt;/p&gt;
&lt;p&gt;Have fun browsing!&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/welcome.html</guid><pubDate>Wed, 10 Sep 2014 23:02:45 GMT</pubDate></item></channel></rss>