<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>BlockByte</title><link>http://kirbyfan64.github.io/</link><description>Random programming tidbits/tutorials</description><language>en</language><lastBuildDate>Wed, 24 Sep 2014 17:50:07 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using AppVeyor to distribute Python wheels</title><link>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://wheel.readthedocs.org/en/latest/"&gt;Wheels&lt;/a&gt; are the future of distribution. No more messy broken &lt;cite&gt;setup.py&lt;/cite&gt; scripts or a needed a compiler for C extensions! Of course, this has a glaring issue: a Linux user can't build Wheels of their C extension for Windows. Unless, of course, you use &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;, install the MinGW compilers, define the compiler variables, etc. However, there is an easier way: &lt;a class="reference external" href="http://kirbyfan64.github.io/posts/www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>appveyor</category><category>ci</category><category>python</category><category>wheels</category><guid>http://kirbyfan64.github.io/posts/using-appveyor-to-distribute-python-wheels.html</guid><pubDate>Sun, 21 Sep 2014 22:02:14 GMT</pubDate></item><item><title>Overloading functions with the C preprocessor</title><link>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;Let's have an imaginary scenario: you're trying to make a library that has a special function, &lt;em&gt;myfunc&lt;/em&gt;. Now, this functions needs to have two possible ways to invoke it. One way takes one int parameter, the other takes two. Here's how you might do that in C++:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;C doesn't have a way to do this. You'll often see code like this:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myfunc_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, this &lt;em&gt;can&lt;/em&gt; be implemented, albeit in a slightly convulted way using a very controversial tool: the C preprocessor.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>c preprocessor hack</category><guid>http://kirbyfan64.github.io/posts/overloading-functions-with-the-c-preprocessor.html</guid><pubDate>Tue, 16 Sep 2014 01:42:34 GMT</pubDate></item><item><title>Welcome!</title><link>http://kirbyfan64.github.io/posts/welcome.html</link><dc:creator>Ryan Gonzalez</dc:creator><description>&lt;p&gt;First post!&lt;/p&gt;
&lt;p&gt;This website is my first ever web page. It's written using the excellent &lt;a class="reference external" href="http://getnikola.com"&gt;Nikola&lt;/a&gt; and reStructuredText. The majority of its content is going to revolve around programming: tutorials, experiments, and lots and lots of rants. :)&lt;/p&gt;
&lt;p&gt;Have fun browsing!&lt;/p&gt;</description><guid>http://kirbyfan64.github.io/posts/welcome.html</guid><pubDate>Wed, 10 Sep 2014 23:02:45 GMT</pubDate></item></channel></rss>